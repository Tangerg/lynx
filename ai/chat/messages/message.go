package messages

import (
	"maps"

	"github.com/Tangerg/lynx/ai/commons/content"
)

// Message types for chat applications.
// These constants define the four types of messages that can be used
// in a chat conversation with AI models.
const (
	// System represents a system message containing high-level instructions
	// for the conversation, such as behavior guidelines or response format requirements.
	System Type = "system"

	// User represents a message from an end-user or developer,
	// typically containing queries or prompts.
	User Type = "user"

	// Assistant represents a message generated by the AI assistant
	// in response to user input.
	Assistant Type = "assistant"

	// Tool represents a message containing function call responses
	// or tool execution results in a chat application.
	Tool Type = "tool"
)

// Type represents the type of a message in a chat conversation.
type Type string

// String returns the string representation of the message type.
// It implements the fmt.Stringer interface.
func (t Type) String() string {
	return string(t)
}

// IsSystem reports whether the message type is System.
func (t Type) IsSystem() bool {
	return t == System
}

// IsUser reports whether the message type is User.
func (t Type) IsUser() bool {
	return t == User
}

// IsAssistant reports whether the message type is Assistant.
func (t Type) IsAssistant() bool {
	return t == Assistant
}

// IsTool reports whether the message type is Tool.
func (t Type) IsTool() bool {
	return t == Tool
}

const (
	// MessageType for metadata use
	MessageType = "message_type"
)

// Message represents a message that can be sent or received in a chat application.
// Messages can have content, metadata, and message types.
type Message interface {
	content.Content
	// Type returns the message type.
	Type() Type
}

var _ Message = (*message)(nil)

// message is the internal implementation of the Message interface.
// It provides a base implementation for message content, metadata, and message type.
type message struct {
	_type    Type           // The message type
	text     string         // The text content of the message
	metadata map[string]any // Additional metadata for the message
}

// Text returns the text content of the message.
func (m *message) Text() string {
	return m.text
}

// Metadata returns the metadata of the message.
func (m *message) Metadata() map[string]any {
	return m.metadata
}

// Type returns the message type of the message.
func (m *message) Type() Type {
	return m._type
}

// newmessage creates a new base message with the specified type, text content, and optional metadata.
// This is an internal helper function used by concrete message type constructors to avoid code duplication.
//
// Parameters:
//   - typ: The message type (System, User, Assistant, or Tool)
//   - text: The text content of the message
//   - metadata: Optional metadata map. If multiple maps are provided, only the first non-nil one is used
//
// Returns:
//   - message: A base message struct with the provided content and automatically injected type metadata
//
// Note: The function automatically adds a MessageType key to the metadata with the message type as string value.
// The metadata parameter is defensively copied to prevent external modifications.
func newmessage(typ Type, text string, metadata ...map[string]any) message {
	md := make(map[string]any)
	if len(metadata) > 0 && metadata[0] != nil {
		md = maps.Clone(metadata[0])
	}
	md[MessageType] = typ.String()
	return message{
		_type:    typ,
		text:     text,
		metadata: md,
	}
}
