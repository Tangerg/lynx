package model

import "context"

// Model defines a generic interface for synchronous models that process
// a single request and produce a single response.
//
// Type Parameters:
// - Req: The type of the request data.
// - Res: The type of the response data.
//
// Methods:
//
// Call:
//
//	Call executes a request and returns a response, performing the operation
//	in a synchronous manner.
//
//	Parameters:
//	- ctx: A context.Context instance that provides cancellation, deadlines,
//	  and other request-scoped values.
//	- req: The request object of type Req containing the input for the model.
//
//	Returns:
//	- Res: The response object of type Res generated by processing the request.
//	- error: An error if the operation fails.
//
// Example Implementation:
//
//	type ExampleModel struct {}
//
//	func (m *ExampleModel) Call(ctx context.Context, req string) (int, error) {
//	    if req == "" {
//	        return 0, errors.New("empty request")
//	    }
//	    return len(req), nil
//	}
type Model[Req any, Res any] interface {
	Call(ctx context.Context, req Req) (Res, error)
}

// StreamingModel defines a generic interface for models that handle streaming
// operations, processing requests and streaming responses using a handler function.
//
// Type Parameters:
// - Req: The type of the request data.
// - Res: The type of the response data.
//
// Methods:
//
// Stream:
//
//	Stream processes a streaming request by accepting a context, a request object,
//	and a handler function to process streamed response chunks.
//
//	Parameters:
//	- ctx: A context.Context instance that provides cancellation, deadlines, and
//	  other request-scoped values.
//	- req: The request object of type Req that initiates the streaming operation.
//	- handler: A StreamChunkHandler function that processes each streamed response
//	  chunk of type Res.
//
//	Returns:
//	- Res: The final result after the streaming operation completes.
//	- error: An error if the streaming operation or handler processing fails.
//
// Example Implementation:
//
//	type ExampleStreamingModel struct {}
//
//	func (m *ExampleStreamingModel) Stream(
//	    ctx context.Context,
//	    req string,
//	    handler StreamChunkHandler[int],
//	) (int, error) {
//	    // Simulated processing
//	    for i := 0; i < 5; i++ {
//	        if err := handler(ctx, i); err != nil {
//	            return 0, err
//	        }
//	    }
//	    return 42, nil
//	}
type StreamingModel[Req any, Res any] interface {
	Stream(ctx context.Context, req Req, handler StreamChunkHandler[Res]) (Res, error)
}

// StreamChunkHandler represents a generic function type that processes
// a chunk of data of any type T in a given context.
//
// The function takes two parameters:
//   - ctx: A context.Context instance that provides cancellation, deadlines, and
//     other request-scoped values.
//   - chunk: The data of type T to be processed.
//
// It returns an error if the processing of the chunk fails.
//
// Example Usage:
//
//	var handler StreamChunkHandler[string] = func(ctx context.Context, chunk string) error {
//	    if len(chunk) == 0 {
//	        return errors.New("empty chunk")
//	    }
//	    fmt.Println("Processed chunk:", chunk)
//	    return nil
//	}
type StreamChunkHandler[T any] func(ctx context.Context, chunk T) error
