grammar filter;

expr        : orExpr ;
orExpr      : andExpr (OR andExpr)* ;
andExpr     : notExpr (AND notExpr)* ;
notExpr     : NOT notExpr | compareExpr ;
compareExpr : relationExpr | memberExpr ;
relationExpr : accessExpr relationOp comparableValue ;
memberExpr   : accessExpr IN listLit
             | accessExpr LIKE STRING_LIT ;
relationOp   : EQ | NE | LT | LE | GT | GE ;
comparableValue : literal | accessExpr ;
accessExpr  : IDENT ('[' accessKey ']')* ;
accessKey   : STRING_LIT | NUM_LIT ;
primary     : accessExpr | literal | parenExpr ;
parenExpr   : '(' expr ')' ;
listLit     : '(' litSeq ')' ;
litSeq      : literal (',' literal)* ;
literal     : NUM_LIT | STRING_LIT | BOOL_LIT ;
NUM_LIT     : '-'? (DEC_NUM | INT_NUM) ;
DEC_NUM     : INT_NUM '.' DIGIT+ ;
INT_NUM     : DIGIT+ ;
STRING_LIT  : '\'' (ESCAPE_SEQ | ~['\\])* '\'' ;
BOOL_LIT    : TRUE | FALSE ;
OR    : 'OR' | 'or' ;
AND   : 'AND' | 'and' ;
NOT   : 'NOT' | 'not' ;
IN    : 'IN' | 'in' ;
LIKE  : 'LIKE' | 'like' ;
TRUE  : 'TRUE' | 'true' ;
FALSE : 'FALSE' | 'false' ;
EQ : '==' ;
NE : '!=' ;
LT : '<' ;
LE : '<=' ;
GT : '>' ;
GE : '>=' ;
IDENT : LETTER (LETTER | DIGIT | '_')* ;
fragment ESCAPE_SEQ : '\\\\' | '\\\'' | '\\"' | '\\n' | '\\t' | '\\r' ;
fragment DIGIT      : [0-9] ;
fragment LETTER     : [a-zA-Z] ;
WS : [ \t\r\n]+ -> skip ;