Expr        = OrExpr ;
OrExpr      = AndExpr { ("OR" | "or") AndExpr } ;
AndExpr     = NotExpr { ("AND" | "and") NotExpr } ;
NotExpr     = ("NOT" | "not") NotExpr | CompareExpr ;
CompareExpr = Primary CompareOp Primary ;
Primary     = AccessExpr | Literal | ParenExpr | ListLit ;
AccessExpr  = Ident { "[" AccessKey "]" } ;
AccessKey   = StrLit | NumLit ;
CompareOp   = "==" | "!=" | "<" | "<=" | ">" | ">=" |
              ("LIKE" | "like") | ("IN" | "in") ;
ParenExpr   = "(" Expr ")" ;
ListLit     = "(" LitSeq ")" ;
LitSeq      = [ Literal { "," Literal } ] ;
Literal     = NumLit | StrLit | BoolLit ;
NumLit      = DecNum | IntNum ;
DecNum      = IntNum "." Digit+ ;
IntNum      = Digit+ ;
StrLit      = "'" { EscapeChar | NormalChar } "'" ;
EscapeChar  = "\\" | "\'" | "\"" | "\n" | "\t" | "\r" ;
NormalChar  = ? any printable character except single quote ? ;
BoolLit     = TrueLit | FalseLit ;
TrueLit     = "TRUE" | "true" ;
FalseLit    = "FALSE" | "false" ;
Ident       = Letter { Letter | Digit | "_" } ;
Digit       = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
Letter      = "a" | "b" | "c" | ... | "z" | "A" | "B" | "C" | ... | "Z" ;