Expr        = OrExpr ;
OrExpr      = AndExpr { ("OR" | "or") AndExpr } ;
AndExpr     = NotExpr { ("AND" | "and") NotExpr } ;
NotExpr     = ("NOT" | "not") NotExpr | CompareExpr ;
CompareExpr = RelationExpr | MemberExpr ;
RelationExpr = AccessExpr RelationOp ComparableValue ;
MemberExpr   = AccessExpr "IN" ListLit
             | AccessExpr "LIKE" StrLit ;
RelationOp   = "==" | "!=" | "<" | "<=" | ">" | ">=" ;
ComparableValue = Literal | AccessExpr ;
AccessExpr  = Ident { "[" AccessKey "]" } ;
AccessKey   = StrLit | NumLit ;
Primary     = AccessExpr | Literal | ParenExpr ;
ParenExpr   = "(" Expr ")" ;
ListLit     = "(" LitSeq ")" ;
LitSeq      = Literal { "," Literal } ;
Literal     = NumLit | StrLit | BoolLit ;
NumLit      = [ "-" ] (DecNum | IntNum) ;
DecNum      = IntNum "." Digit+ ;
IntNum      = Digit+ ;
StrLit      = "'" { EscapeSeq | NormalChar } "'" ;
EscapeSeq   = "\\" | "\'" | "\"" | "\n" | "\t" | "\r" ;
NormalChar  = ? ;
BoolLit     = ("TRUE" | "true") | ("FALSE" | "false") ;
Ident       = Letter { Letter | Digit | "_" } ;
Digit       = "0" | ... | "9" ;
Letter      = "a" | ... | "z" | "A" | ... | "Z" ;