package messages

import (
	"maps"

	"github.com/Tangerg/lynx/ai/commons/content"
)

// Type represents the type of a message in a chat conversation.
type Type string

// Message types for chat applications.
// These constants define the four types of messages that can be used
// in a chat conversation with AI models.
const (
	// System represents a system message containing high-level instructions
	// for the conversation, such as behavior guidelines or response format requirements.
	System Type = "system"

	// User represents a message from an end-user or developer,
	// typically containing queries or prompts.
	User Type = "user"

	// Assistant represents a message generated by the AI assistant
	// in response to user input.
	Assistant Type = "assistant"

	// Tool represents a message containing function call toolResponses
	// or tool execution results in a chat application.
	Tool Type = "tool"
)

// String returns the string representation of the message type.
// It implements the fmt.Stringer interface.
func (t Type) String() string {
	return string(t)
}

// IsSystem reports whether the message type is System.
func (t Type) IsSystem() bool {
	return t == System
}

// IsUser reports whether the message type is User.
func (t Type) IsUser() bool {
	return t == User
}

// IsAssistant reports whether the message type is Assistant.
func (t Type) IsAssistant() bool {
	return t == Assistant
}

// IsTool reports whether the message type is Tool.
func (t Type) IsTool() bool {
	return t == Tool
}

const (
	// MessageTypeMetadataKey for metadata use
	MessageTypeMetadataKey = "message_type"
)

// Message represents a message that can be sent or received in a chat application.
// Messages can have content, metadata, and message types.
type Message interface {
	content.Content
	// Type returns the message type.
	Type() Type
	message()
}

var _ Message = (*message)(nil)

// message is the internal implementation of the Message interface.
// It provides a base implementation for message content, metadata, and message type.
type message struct {
	_type    Type           // The message type
	text     string         // The text content of the message
	metadata map[string]any // Additional metadata for the message
}

func (m *message) message() {}

func (m *message) Text() string {
	return m.text
}

func (m *message) Metadata() map[string]any {
	return m.metadata
}

func (m *message) Type() Type {
	return m._type
}

// newMessage creates a new base message with specified type and content.
// Used internally by message constructors to avoid code duplication.
//
// Parameters:
//   - typ: Message type (System, User, Assistant, or Tool)
//   - text: Message text content
//   - metadata: Optional metadata map
//
// Returns:
//   - message: Base message with content and type metadata
//
// The function automatically adds MessageTypeMetadataKey to metadata and defensively copies
// the metadata map to prevent external modifications.
func newMessage(typ Type, text string, metadata map[string]any) message {
	var md map[string]any
	if metadata != nil {
		md = maps.Clone(metadata)
	} else {
		md = make(map[string]any)
	}
	md[MessageTypeMetadataKey] = typ.String()
	return message{
		_type:    typ,
		text:     text,
		metadata: md,
	}
}
